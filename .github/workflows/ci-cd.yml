name: Deploy or Destroy Medusa

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Adjust region as needed

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        id: terraform-plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: | 
          terraform apply -auto-approve tfplan
          echo "EC2_HOST=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo ${{ env.EC2_HOST }}
        working-directory: ./terraform

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Update and Install Dependencies
        if: github.event.inputs.action == 'apply'
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 ubuntu@${{ env.EC2_HOST }} << 'EOF'
            # Update and install necessary packages
            sudo apt-get update -y
            sudo apt-get upgrade -y
            
            # Install Node.js 18.x
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs
            
            # Install PostgreSQL
            sudo apt install -y postgresql postgresql-contrib
            sudo systemctl start postgresql
            sudo systemctl enable postgresql

            # Create PostgreSQL database and user
            sudo -u postgres psql -c "CREATE USER medusabackend WITH PASSWORD 'medusa123' CREATEDB;"
            sudo -u postgres psql -c "CREATE DATABASE medusabackend OWNER medusabackend;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusabackend TO medusabackend;"

            # Install Redis
            sudo apt install -y redis-server
            sudo systemctl enable redis-server
            sudo systemctl start redis-server

            # Clone the Medusa app repository
            # Check if the directory exists, delete it if true, and then clone the repository
            if [ -d "./my-app-store" ]; then
              echo "Directory ./my-app-store exists. Deleting it..."
              rm -rf ./my-app-store
            fi

            echo "Cloning the repository..."
            git clone https://github.com/palemanudeep/Deploy-Medusa-on-AWS-EC2.git ./my-app-store

            cd ./my-app-store

            # Set up .env file
            touch .env
            echo "DATABASE_URL=postgres://medusabackend:medusa123@localhost:5432/medusabackend" > .env
            echo "REDIS_URL=redis://localhost:6379" >> .env

            # Install Medusa dependencies
            sudo npm install -g @medusajs/medusa-cli
            npm install
            npm install cross-env --save-dev

            # Run database migrations
            npx medusa migrations run

            # Create Medusa admin user
            npx medusa user -e anudeep@gmail.com -p anudeep123

            # Check for process using port 9000 and kill it if necessary
            if lsof -i :9000; then
              echo "Killing process running on port 9000..."
              lsof -ti:9000 | xargs kill -9
            fi

            # Start the Medusa application in the background with a timeout of 2 minutes
            nohup timeout 120 sudo npm run start &

            echo "Medusa deployment initiated."
      
          EOF
